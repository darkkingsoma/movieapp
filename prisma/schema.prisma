generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  username      String    @unique
  password      String?
  accounts      Account[]
  sessions      Session[]
  movieLists    MovieList[]
  comments      Comment[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
}

model VerificationToken {
  id          String   @id @default(cuid())
  identifier  String
  token       String   @unique
  expires     DateTime

  @@unique([identifier, token])
}

model MovieList {
  id          String   @id @default(cuid())
  userId      String
  movieId     String
  title       String
  poster      String
  category    String
  overview    String   @db.Text
  releaseDate String   @default("")
  rating      String   @default("N/A")
  votes       String   @default("0")
  genreIds    String   @default("[]")
  description String   @db.Text
  source      String   @default("tmdb")
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([movieId])
}

model Comment {
  id          String   @id @default(cuid())
  videoId     String
  text        String
  authorName  String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])

  @@index([videoId])
  @@index([userId])
}